
import numpy as np
from hylaa.hybrid_automaton import LinearHybridAutomaton, HyperRectangle, LinearConstraint
from hylaa.star import init_hr_to_star
from hylaa.engine import HylaaSettings, HylaaEngine
from hylaa.containers import PlotSettings
from hylaa.pv_container import PVObject
from hylaa.timerutil import Timers
from hylaa.simutil import compute_simulation
import matplotlib.pyplot as plt

step_size = 0.1
dim = 21
max_time = 1.0


def define_ha(settings, args):
    # x' = Ax + Bu + c
    '''make the hybrid automaton and return it'''

    usafe_r = args[0]
    if len(args) > 2:
        x_ref = args[1]
        step_inputs = args[2]

    ha = LinearHybridAutomaton()
    ha.variables = ["x1", "x2", "x3", "x4", "x5", "x6", "x7", "x8", "x9", "x10", "x11", "x12", "x13", "x14", "x15", "x16", "x17", "x18", "x19", "x20", "t"]

    a_matrix = np.array([[1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], dtype=float)

    b_matrix = np.array([[0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0.1, 0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0.1, -0.1,0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0.1,-0.1, 0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,  0.1, -0.1, 0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0.1,-0.1, 0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0.1,-0.1, 0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,  0.1, -0.1, 0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0, 0.1,-0.1,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0, 0.1,-0.1,   0],
        [0,   0,   0,   0,   0,   0,   0,   0,   0,   0],
        [0,   0,   0,   0,   0,   0,   0,   0, 0.1,-0.1],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=float)

    k_matrix = np.array(
        [[-7.36421144, -8.67472342, -1.46914025, -1.55897265, -1.02212334, -1.08623604,
  -0.72144969, -0.76789506, -0.51416355, -0.54811612, -0.36710532, -0.39192759,
  -0.25914664, -0.27703871, -0.1765116,  -0.18890941, -0.10991462, -0.11773395,
  -0.05276657, -0.05654998, 0],
 [-5.89507119, -7.11575077,  6.3420881,   7.58848739, -2.19058994, -2.32686771,
  -1.53628689, -1.63435216, -1.08855502, -1.15982265, -0.77331019, -0.82515483,
  -0.54361692, -0.580837,   -0.36906126, -0.39477265, -0.22927817, -0.24545939,
  -0.10991462, -0.11773395, 0],
 [-4.87294785, -6.02951473,  5.1736215,   6.34785571,  5.82792455,  7.04037127,
  -2.55769526, -2.7187953,  -1.79543353, -1.91139086, -1.26506662, -1.34873206,
  -0.88322481, -0.94288877, -0.59638349, -0.63738698, -0.36906126, -0.39477265,
  -0.1765116,  -0.18890941, 0],
 [-4.15149816, -5.26161967,  4.3587843,   5.48139862,  4.80651618,  5.95592812,
   5.56877791,  6.76333256, -2.73420686, -2.90770471, -1.90534815, -2.02912481,
  -1.31783318, -1.40528204, -0.88322481, -0.94288877, -0.54361692, -0.580837,
  -0.25914664, -0.27703871, 0],
 [-3.63733461, -4.71350356,  3.78439284,  4.86969208,  4.09963766,  5.20435991,
   4.63000458,  5.76701871,  5.45886329,  6.64559862, -2.78697343, -2.96425469,
  -1.90534815, -2.02912481, -1.26506662, -1.34873206, -0.77331019, -0.82515483,
  -0.36710532, -0.39192759, 0],
 [-3.27022929, -4.32157596,  3.37818797,  4.43646485,  3.60788124,  4.68078267,
   3.98972304,  5.08662596,  4.57723801,  5.71046873,  5.45886329,  6.64559862,
  -2.73420686, -2.90770471, -1.79543353, -1.91139086, -1.08855502, -1.15982265,
  -0.51416355, -0.54811612, 0],
 [-3.01108265, -4.04453726,  3.09371769,  4.13266655,  3.26827335,  4.3187309,
   3.55511467,  4.6242327,   3.98972304,  5.08662596,  4.63000458,  5.76701871,
   5.56877791,  6.76333256, -2.55769526, -2.7187953,  -1.53628689, -1.63435216,
  -0.72144969, -0.76789506, 0],
 [-2.83457105, -3.85562785,  2.90116803,  3.92680331,  3.04095112,  4.07611658,
   3.26827335,  4.3187309,   3.60788124,  4.68078267,  4.09963766,  5.20435991,
   4.80651618,  5.95592812,  5.82792455,  7.04037127, -2.19058994, -2.32686771,
  -1.02212334, -1.08623604, 0],
 [-2.72465643, -3.7378939,   2.78180448,  3.79907787,  2.90116803,  3.92680331,
   3.09371769,  4.13266655,  3.37818797,  4.43646485,  3.78439284,  4.86969208,
   4.3587843,   5.48139862,  5.1736215,   6.34785571,  6.3420881,   7.58848739,
  -1.46914025, -1.55897265, 0],
 [-2.67188986, -3.68134393,  2.72465643,  3.7378939,   2.83457105,  3.85562785,
   3.01108265,  4.04453726,  3.27022929,  4.32157596,  3.63733461,  4.71350356,
   4.15149816,  5.26161967,  4.87294785,  6.02951473,  5.89507119,  7.11575077,
   7.36421144,  8.67472342, 0]], dtype=float)

    locations = []
    n_locations = len(step_inputs)-4
    for idx in range(n_locations):
        loc_name = 'loc' + str(idx)
        loc = ha.new_mode(loc_name)
        b_k_matrix = np.matmul(b_matrix, k_matrix)
        loc.a_matrix = a_matrix + b_k_matrix
        c_vector = -np.matmul(b_k_matrix, x_ref[idx])
        c_vector = c_vector + np.matmul(b_matrix, step_inputs[idx])
        c_vector[dim-1] = step_size
        # print(c_vector)
        loc.c_vector = c_vector
        loc.inv_list.append(LinearConstraint([0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0], step_size*idx))  # t <= 0.1
        locations.append(loc)

    for idx in range(n_locations-1):
        trans = ha.new_transition(locations[idx], locations[idx+1])
        trans.condition_list.append(LinearConstraint([-0.0, -0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0], -step_size*idx))  # t >= 0.1

    error = ha.new_mode('_error')
    error.is_error = True

    trans = ha.new_transition(locations[0], error)

    usafe_set_constraint_list = []
    if usafe_r is None:
        usafe_set_constraint_list.append(LinearConstraint([-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], 1))
    else:
        usafe_star = init_hr_to_star(settings, usafe_r, ha.modes['_error'])

        for constraint in usafe_star.constraint_list:
            usafe_set_constraint_list.append(constraint)

    for constraint in usafe_set_constraint_list:
        trans.condition_list.append(constraint)

    return ha, usafe_set_constraint_list


def define_init_states(ha, init_r):
    '''returns a list of (mode, HyperRectangle)'''
    # Variable ordering: [x, y]
    rv = []
    rv.append((ha.modes['loc0'], init_r))

    return rv


def define_settings():
    'get the hylaa settings object'
    plot_settings = PlotSettings()
    plot_settings.plot_mode = PlotSettings.PLOT_IMAGE
    plot_settings.xdim = 0
    plot_settings.ydim = 1

    s = HylaaSettings(step=0.1, max_time=max_time, disc_dyn=True, plot_settings=plot_settings)
    s.stop_when_error_reachable = False
    
    return s


def run_hylaa(settings, init_r, *args):

    'Runs hylaa with the given settings, returning the HylaaResult object.'
    assert len(args) > 0

    ha, usafe_set_constraint_list = define_ha(settings, args)
    init = define_init_states(ha, init_r)

    engine = HylaaEngine(ha, settings)
    reach_tree = engine.run(init)

    return PVObject(len(ha.variables), usafe_set_constraint_list, reach_tree)


if __name__ == '__main__':
    settings = define_settings()

    a_matrices = []
    c_vectors = []
    max_steps = []
    step_inputs = np.array([[10.0, 10.0, 10.0, 10.0, -10.0, -10.0, 10.0, -10.0, 10.0, -10.0],
                   [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0], [10.0, 10.0, 10.0, 10.0, 10.0, 6.910580254148897, -10.0, 10.0, -10.0, 10.0],
                   [10.0, 6.8758914890920755, -0.5711953537701551, -10.0, 10.0, 9.247628022117011, -10.0, 9.547993389260254, -10.0, -7.320440006147497],
                            [-10.0, -10.0, -10.0, -10.0, 9.950723050641706, 10.0, -10.0, -10.0, -10.0, -10.0],
                   [-10.0, -10.0, -10.0, -10.0, -10.0, -10.0, 1.8607192175793956, -10.0, -8.48019821971365, 1.896472848144132],
                            [-10.0, -10.0, -1.5969449275691459, 0.9432853964386112, -10.0, -10.0, 10.0, -10.0, 3.3575202942840647, -10.0],
                   [-2.0008976631495954, -8.390827816516099, -10.0, 10.0, -10.0, -10.0, 10.0, 5.701135350409567, 10.0, 10.0],
                            [1.2072975651873872, 10.0, 10.0, -3.7108941598452425, 6.725327119472541, 10.0, -6.180542187863515, 10.0, 10.0, 10.0],
                   [10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0, 10.0]], dtype=float)

    a_matrix = np.array([[1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0.1, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]], dtype=float)

    b_matrix = np.array([[0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0.1, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0.1, -0.1, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0.1, -0.1, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0.1, -0.1, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0.1, -0.1, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0.1, -0.1, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0.1, -0.1, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0.1, -0.1, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0.1, -0.1, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0.1, -0.1],
                         [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], dtype=float)

    n_locations = len(step_inputs)
    for idx in range(n_locations):
        a_matrices.append(a_matrix)
        c_vector = np.matmul(b_matrix, step_inputs[idx])
        c_vector[dim-1] = step_size
        # print(c_vector)
        c_vectors.append(c_vector)
        max_steps.append(1)

    ref_state = np.array([0.0, 20.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0])
    ref_simulation = np.array(compute_simulation(ref_state, a_matrices, c_vectors, max_steps, 1, disc_dyn=True))
    print(ref_simulation)
    sim_t = np.array(ref_simulation).T
    plt.plot(sim_t[0], sim_t[1], 'b', linestyle='--')
    plt.show()

    init_r = HyperRectangle([(-0.06708257865432346, 0.06708257865432346), (19.932917421345678, 20.067082578654322),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346),
                             (0.9329174213456766, 1.0670825786543234), (-0.06708257865432346, 0.06708257865432346), (0, 0)])

    pv_object = run_hylaa(settings, init_r, None, ref_simulation, step_inputs)
